import java.util.LinkedList;
import java.util.Queue;

/**
 * @author arpita
 *
 *        Create a queue and keep adding cats and dogs in it
 *        When pop is called for Dog:
 *        	Peek if top animal is Dog or not, keep popping and pushing into the temp queue
 *        	Stop when you find a dog and return
 *        
 *        When pop dog is called return from the temp queue
 *        
 *        When pop cat is called check for cat in the original queue if found
 *	  return else keep poping and pushing into the temp queue.
 *
 * 
 */
public class AnimalShelter {

	Queue<String> origQueue = new LinkedList<String>();
	Queue<String> traversalQueue = new LinkedList<String>();

	void enqueue(String animal) {
		origQueue.add(animal);
	}

	String popCat() {
		String poppedCat = "";

		if (traversalQueue.size() < 1 || !traversalQueue.peek().startsWith("CAT")) {
			while (origQueue.peek() != null && origQueue.peek().startsWith("DOG")) {
				traversalQueue.add(origQueue.remove());
			}
			poppedCat = origQueue.remove();
		}else{
			poppedCat = traversalQueue.remove();
		}
		
		return poppedCat;
	}

	String popDog() {
		String poppedDog = "";

		if (traversalQueue.size() < 1 || !traversalQueue.peek().startsWith("DOG")) {
			while (origQueue.peek() != null && origQueue.peek().startsWith("CAT")) {
				traversalQueue.add(origQueue.remove());
			}
			poppedDog = origQueue.remove();
		}else{
			poppedDog = traversalQueue.remove();
		}
		
		return poppedDog;
	}

	String popAny() {
		
		String poppedAnimal = "";
		
		if (traversalQueue.size() < 1 ) {
			poppedAnimal = origQueue.remove();
		}else
			poppedAnimal = traversalQueue.remove();
		
		return poppedAnimal;
	}
	
	
	private static void testAnimalShelter() {
	
		AnimalShelter animalShelter = new AnimalShelter();
		animalShelter.enqueue("CAT1");
		animalShelter.enqueue("CAT2");
		System.out.println(animalShelter.popAny());
		animalShelter.enqueue("CAT3");
		animalShelter.enqueue("DOG1");
		animalShelter.enqueue("CAT4");
		System.out.println(animalShelter.popDog());
		animalShelter.enqueue("CAT5");
		animalShelter.enqueue("DOG2");
		animalShelter.enqueue("DOG3");
		animalShelter.enqueue("DOG4");
		System.out.println(animalShelter.popDog());
		animalShelter.enqueue("CAT6");
		System.out.println(animalShelter.popCat());
	}

}
